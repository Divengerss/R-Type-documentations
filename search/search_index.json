{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"R-Type Networked"},{"location":"#overview","title":"Overview","text":"<p>R-Type is a horizontally scrolling shooter arcade video game developed and released by Irem in 1987 and the first game in the R-Type series. The player controls a star ship, the R-9 \"Arrowhead\", in its efforts to destroy the Bydo, a powerful alien race bent on wiping out all of mankind.</p> <p>Source: Wikipedia</p>"},{"location":"#installation","title":"Installation","text":"<p>Installation process uses vcpkg to install its depedencies.</p> <p>We provided Installation scripts to help you install everything.</p> <p>Simply run <code>install.sh</code> on Linux or <code>install.bat</code> on Windows.</p> <p>To compile the programs <code>r-type_client</code> and <code>r-type_server</code>: <pre><code>cmake -S . -B Build/\nmake -C Build/ -j\n</code></pre> Note: Make sure you are under the root directory before running the compilation commands.</p>"},{"location":"#tech-stack","title":"Tech Stack","text":"<p>Both programs use C++</p> <p>Client: SFML</p> <p>Server: Asio</p> <p>Note: Has it is required to communicate with the server, the client also uses Asio.</p>"},{"location":"#license","title":"License","text":""},{"location":"#authors","title":"Authors","text":"<ul> <li>@Divengerss</li> <li>@M4KS0U</li> <li>@JulianEmr</li> <li>@JulesLevi</li> </ul>"},{"location":"Game/Client/client/","title":"Client Documentation","text":"<p>Client uses the SFML graphics library, it's coded in C++.</p>"},{"location":"Game/Client/client/#how-to-use-it","title":"How to use it","text":"<p>Use command <code>cmake -S . -B Build/</code> then <code>make -C Build/ -j</code> to compile. Start the client with the command <code>./Release/r-type_client</code>.</p>"},{"location":"Game/Client/client/#networking","title":"Networking","text":"<p>Client can change IP address and port to connect to the server and the timeout connection time in second. Everything is in the <code>client.cfg</code> file.</p>"},{"location":"Game/Client/client/#functions-details","title":"Functions details","text":""},{"location":"Game/Client/client/#components","title":"Components","text":"<p>ActiveBonus : <code>ActiveBonus(int ss = ShootStyle::ONEBULLET, int sb = SpeedBoost::SPEEDNORMAL, int fb = ForceBoost::FORCENORMAL)</code> allows you to have the type of ball, speed and force.</p> <p>Animation : <code>Animation(int rect)</code> sets the top-left position of the texture rectangle.</p> <p>Audio : <code>Audio(float volume, const std::string &amp;path, bool loop)</code> sets up the volume, the path to the file and the loop.</p> <p>Controllable : <code>Controllable(const std::string &amp;playerId)</code> sets up the player's index, if he has one then the entity is controllable.</p> <p>Damaging : <code>Damaging(int damages)</code> sets the damage level of the entity.</p> <p>Destroyable : <code>Destroyable(int hp)</code> sets up the number of lives of the entity.</p> <p>Hitbox : <code>Hitbox(int width, int height)</code> sets up the length and height of the entity.</p> <p>MovementPattern : <code>MovementPattern(MovementPatterns movementPattern)</code> indicates the movement pattern of the entity.</p> <p>Pickup : <code>Pickup(BonusType bonusType = SpeedBoost, bool positive = true)</code> indicates whether the entity is takeable.</p> <p>Position : <code>Position(float x = 0, float y = 0)</code> set up the position of the entity.</p> <p>Scale : <code>Scale(float scaleX, float scaleY)</code> set up the enlargement of the entity.</p> <p>Text : <code>Text(const std::string &amp;text, int size = 1)</code> set up the text to display and its size.</p> <p>Texture : <code>Texture(std::string path, int left, int top, int width, int height)</code> set up the path to the texture file as well as the information concerning the area to display the texture.</p> <p>Velocity : <code>Velocity(int velocity)</code> set up the velocity of the entity.</p>"},{"location":"Game/Client/client/#systems","title":"Systems","text":"<p>DamageSystem : <code>void damageSystem(Registry &amp;r, std::map&lt;size_t, std::pair&lt;sf::Sprite, sf::Texture&gt;&gt; &amp;sprites)</code> parse every entity, check if it can take damage, and destroy if damage is higher than life.</p> <p>PositionDamage : <code>positionSystemClient(Registry &amp;r, net::Client &amp;client)</code> check if it has any pattern, if not, use keyboard to move entity, otherwise, the entity move automatically.</p>"},{"location":"Game/Client/client/#main","title":"main","text":"<p>Reads a configuration file from the current directory. Then extracts the \"host\" address and port from this configuration file. It establishes a network connection with a remote server using this information. And runs the game, represented by the rtype::Game object, using the network connection.</p>"},{"location":"Game/Client/client/#mainmenu","title":"mainMenu","text":"<p>It loads the font, the color, the size, and what to write as well as their position.</p>"},{"location":"Game/Client/client/#moveup","title":"MoveUp","text":"<p>Allows you to change the color of the text above when you press the up key and select it.</p>"},{"location":"Game/Client/client/#movedown","title":"MoveDown","text":"<p>Allows you to change the color of the text below when pressing the up key and select it.</p>"},{"location":"Game/Client/client/#rungame","title":"runGame","text":"<p>Register every components needed and create entity with these. Then create a window and check if the page to display is the menu or not.</p>"},{"location":"Game/Client/client/#updatesprite","title":"updateSprite","text":"<p>Receives all entities, paths and sorts as needed, then updates positions, textures and damage.</p>"},{"location":"Guidlines/CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"Guidlines/CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"Guidlines/CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"Guidlines/CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"Guidlines/CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"Guidlines/CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement to Epitech Institute of Technologie. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"Guidlines/CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"Guidlines/CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"Guidlines/CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"Guidlines/CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"Guidlines/CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"Guidlines/CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"Guidlines/CONTRIBUTE/","title":"Contributing","text":"<p>Please take a moment to review this document for guidelines on how to contribute effectively.</p>"},{"location":"Guidlines/CONTRIBUTE/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Code of Conduct</li> <li>How Can I Contribute?</li> <li>Reporting Bugs</li> <li>Suggesting Enhancements</li> <li>Creating Pull Requests</li> <li>Development Setup</li> <li>Coding Guidelines</li> <li>Commit Message Guidelines</li> <li>License</li> </ul>"},{"location":"Guidlines/CONTRIBUTE/#code-of-conduct","title":"Code of Conduct","text":"<p>Please note that this project has adopted a Code of Conduct. By participating in this project, you are expected to uphold this code of conduct. Please report any unacceptable behavior to project maintainers.</p>"},{"location":"Guidlines/CONTRIBUTE/#how-can-i-contribute","title":"How Can I Contribute?","text":""},{"location":"Guidlines/CONTRIBUTE/#reporting-bugs","title":"Reporting Bugs","text":"<p>If you encounter a bug or an issue with the project, please open a new issue on our GitHub repository. When reporting a bug, please include as much detail as possible, including your operating system and a clear description of the problem.</p>"},{"location":"Guidlines/CONTRIBUTE/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>We welcome your suggestions for improving the project. If you have an idea for an enhancement or new feature, please create an enhancement request on GitHub. Describe the feature you'd like to see and how it would benefit the project.</p>"},{"location":"Guidlines/CONTRIBUTE/#creating-pull-requests","title":"Creating Pull Requests","text":"<p>Contributions in the form of code changes, bug fixes, or new features are greatly appreciated! To contribute, please follow these steps:</p> <ol> <li> <p>Fork the repository to your GitHub account.</p> </li> <li> <p>Clone the forked repository to your local machine:</p> </li> </ol> <pre><code>git clone git@github.com:EpitechPromo2026/B-CPP-500-PAR-5-1-rtype-julian.emery.git\n</code></pre> <p>Create a new branch for your work:</p> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <ul> <li>Make your code changes, following our coding guidelines.</li> </ul> <p>Commit your changes with descriptive commit messages:</p> <pre><code>git commit -m \"[ADD]: your feature description\"\n</code></pre> <p>Push your branch to your forked repository:</p> <pre><code>git push origin feature/your-feature-name\n</code></pre> <ul> <li> <p>Open a Pull Request against the main repository. Be sure to provide a clear title and description of your changes.</p> </li> <li> <p>Participate in the code review process, addressing feedback and making necessary changes.</p> </li> <li> <p>Once approved by reviewers and all checks pass, a project collaborator will merge your Pull Request into the main branch.</p> </li> </ul> <p>Please be patient during the review process, and thank you for your contribution! Development Setup</p> <p>If you'd like to set up the project for local development, follow our development setup guide for detailed instructions on how to get started. Coding Guidelines</p> <p>To maintain code quality and consistency, please adhere to our coding guidelines when making changes to the project. Commit Message Guidelines</p> <p>We follow a set of commit message guidelines to keep our commit history clean and informative. Please review these guidelines before making commits.</p> <p>By contributing to this project, you agree that your contributions will be licensed under the LICENSE of this project.</p>"},{"location":"Guidlines/workflow/","title":"Pull Request Workflow","text":""},{"location":"Guidlines/workflow/#introduction","title":"Introduction","text":"<p>This document outlines the workflow for contributing to our project using Pull Requests. Pull Requests are a fundamental part of our collaborative development process, allowing team members and contributors to propose changes, discuss them, and eventually merge them into the main codebase.</p>"},{"location":"Guidlines/workflow/#workflow-overview","title":"Workflow Overview","text":"<p>Our Pull Request Workflow follows these main steps:</p> <ul> <li> <p>Fork the Repository: If you're not a project collaborator, fork the repository to create your own copy.</p> </li> <li> <p>Clone the Repository: Clone your forked repository to your local development environment.</p> </li> <li> <p>Create a Feature Branch: Before making any changes, create a new branch for your work. Branch names should be descriptive of the feature or fix you're implementing.</p> </li> <li> <p>Make Changes: Make your code changes, following our coding style and guidelines. Commit your changes to your feature branch regularly.</p> </li> <li> <p>Open a Pull Request: When your feature or fix is complete, open a Pull Request from your feature branch to the main branch of the main repository. Provide a clear title and description of your changes.</p> </li> <li> <p>Code Review: Team members will review your code, provide feedback, and discuss any necessary changes. Be responsive to feedback and update your branch accordingly.</p> </li> <li> <p>Continuous Integration: Automated tests will run on your branch to ensure that your changes do not introduce regressions or errors.</p> </li> <li> <p>Merge: Once your Pull Request has been approved and passes all tests, it can be merged into the main branch.</p> </li> <li> <p>Cleanup: After merging, delete your feature branch and ensure your local and remote repositories are up-to-date.</p> </li> </ul>"},{"location":"Guidlines/workflow/#detailed-workflow-steps","title":"Detailed Workflow Steps","text":"<ol> <li> <p>Fork the Repository</p> </li> <li> <p>If you're not a project collaborator, click the \"Fork\" button on the top right of the repository page to create a fork in your own GitHub account.</p> </li> <li> <p>Clone the Repository</p> </li> </ol> <pre><code>git clone git@github.com:EpitechPromo2026/B-CPP-500-PAR-5-1-rtype-julian.emery.git\ncd B-CPP-500-PAR-5-1-rtype-julian.emery\n</code></pre> <ol> <li>Create a Feature Branch</li> </ol> <pre><code># Create a new branch and switch to it\ngit checkout -b feature/your-feature-name\n</code></pre> <ol> <li> <p>Make Changes</p> </li> <li> <p>Make your code changes following our coding guidelines.     Commit your changes with descriptive commit messages:</p> </li> </ol> <pre><code>git commit -m \"[ADD]: your feature description\"\n</code></pre> <ul> <li> <p>Additionnaly, you may use the commit body to add additonnal informations.</p> </li> <li> <p>Open a Pull Request</p> </li> <li> <p>Push your feature branch to your forked repository:</p> </li> </ul> <p><pre><code>git push origin feature/your-feature-name\n</code></pre> -    Visit the main repository on GitHub and click the \"New Pull Request\" button.</p> <ol> <li> <p>Code Review</p> </li> <li> <p>Participate in the code review process, addressing feedback and making necessary changes to your code.</p> </li> <li> <p>Continuous Integration</p> </li> <li> <p>Automated tests and checks will run on the dev and main branch. Ensure all checks pass.</p> </li> <li> <p>Merge</p> </li> <li> <p>Once approved by reviewers and all checks pass, a project collaborator will merge your Pull Request into the main branch.</p> </li> <li> <p>Cleanup</p> </li> <li> <p>After merging, delete your feature branch both locally and remotely.</p> </li> </ol>"},{"location":"Guidlines/workflow/#contribution-guidelines","title":"Contribution Guidelines","text":"<ul> <li>Follow our coding style and guidelines as outlined in our CONTRIBUTING.md document.</li> </ul>"},{"location":"Guidlines/workflow/#code-of-conduct","title":"Code of Conduct","text":"<ul> <li>Please review and adhere to our project's Code of Conduct at all times.</li> </ul>"},{"location":"Server/architecture/","title":"Architecture","text":"<p>The server should be self-explanatory when reading the source code, nevertheless, this documentation provides more details about the server workflow.</p> <p>The server uses Asio non-boost C++20 to run.</p> <p>The network code can be found under the <code>rtype</code> namespace included in the <code>Game.hpp</code>.</p> <p>To instantiate a new server, simply call the <code>Server</code> class constructor and calls <code>startServer()</code> to start the server. Just by doing that will run your server properly. However, you need to keep your program open or the server will close itself if the main returns.</p> <p></p> <p>Here is an example of implementation <pre><code>#include \"Game.hpp\"\nint main()\n{\nrtype::loopSystem game;\ngame.runNetwork();\nwhile (true) {\n// Game logics\n}\n}\n</code></pre></p>"},{"location":"Server/architecture/#cfg-config-files","title":"CFG Config files","text":"<p>The configuration file is required to run the server with modified settings. It provides the host and port to listen to.</p> <p>Here is the <code>server.cfg</code> file located inside the <code>resources</code> directory. <pre><code># Server config file\n\n# IP Address to connect to\nhost=127.0.0.1\n\n# Port of the host to connect to\nport=12346\n</code></pre></p>"},{"location":"Server/architecture/#constructorsdestructors","title":"Constructors/Destructors","text":""},{"location":"Server/architecture/#server-default-ctor","title":"Server default ctor","text":"<p><code>Network()</code></p> <p>Network class ctor. The ctor will seek a <code>.cfg</code> file for its configuration as mention before. If the file format is corrupted, a value can't be found or the file is missing, the default values are applied. If unchanged in the code, they will be 127.0.0.1 for the host and 12346 for the port number</p>"},{"location":"Server/architecture/#server","title":"~Server","text":"<p><code>~Server()</code></p> <p>The <code>Server</code> class destructor.</p>"},{"location":"Server/architecture/#getters","title":"Getters","text":""},{"location":"Server/architecture/#getiocontext","title":"getIoContext","text":"<p><code>asio::io_context &amp;getIoContext() const noexcept</code></p> <p>Returns the Asio IO context.</p>"},{"location":"Server/architecture/#getioservice","title":"getIoService","text":"<p><code>asio::io_context &amp;getIoService() const noexcept</code></p> <p>Returns the Asio IO Serivice.</p>"},{"location":"Server/architecture/#gethost","title":"getHost","text":"<p><code>const std::string &amp;getHost() const noexcept</code></p> <p>Returns the Host string.</p>"},{"location":"Server/architecture/#getport","title":"getPort()","text":"<p><code>std::uint16_t getPort() const noexcept</code></p> <p>Returns the Port number as an unsigned 16bits integer</p>"},{"location":"Server/architecture/#getserverendpoint","title":"getServerEndpoint","text":"<p><code>const asio::ip::udp::endpoint &amp;getServerEndpoint() const noexcept</code></p> <p>Returns the server endpoint, the endpoint corresponds to the communication terminaison of the server.</p>"},{"location":"Server/architecture/#getsocket","title":"getSocket","text":"<p><code>const asio::ip::udp::socket &amp;getSocket() const noexcept</code></p> <p>Returns the server socket.</p>"},{"location":"Server/architecture/#getasioerrorcode","title":"getAsioErrorCode","text":"<p><code>const asio::error_code &amp;getAsioErrorCode() const noexcept</code></p> <p>Returns the Asio error code. This value is set whenever an error occures in the Asio context.</p>"},{"location":"Server/architecture/#getclients","title":"getClients","text":"<p><code>std::vector&lt;Client&gt; &amp;getClients() const noexcept</code></p> <p>Returns the connected clients as a vector of Client class.</p>"},{"location":"Server/architecture/#getpacket","title":"getPacket","text":"<p><code>const std::array&lt;std::uint8_t, packetSize&gt; &amp;getClients() const noexcept</code></p> <p>Returns the last packet received.</p>"},{"location":"Server/architecture/#setters","title":"Setters","text":""},{"location":"Server/architecture/#sethost","title":"setHost","text":"<p><code>void setHost(const std::string &amp;host)</code></p> <p>Sets the server host.</p>"},{"location":"Server/architecture/#setport","title":"setPort","text":"<p><code>void setPort(std::uint16_t port)</code></p> <p>Sets the server port</p>"},{"location":"Server/architecture/#setconnection","title":"setConnection","text":"<p><code>void setConnection(const std::string &amp;host, std::uint16_t port)</code></p> <p>Sets the server host and port, This calls to the <code>setHost</code> and <code>setPort</code>.</p>"},{"location":"Server/architecture/#setserverinstance","title":"setServerInstance","text":"<p><code>static void setServerInstance(Server* instance)</code></p> <p>Set the static variable <code>serverInstance</code> used to access class elements from the IO Service, mainly used to handle CTRL-C event.</p>"},{"location":"Server/architecture/#setpacket","title":"setPacket","text":"<p><code>void setPacket(T &amp;packet, packet::packetHeader &amp;header, T &amp;data)</code></p> <p>Sets the packet from a <code>typename T</code> template packet, the packet header and its data. This function will memory copy the <code>header</code> and <code>data</code> into the <code>packet</code>. The packet must be large enough to hold the header + data sizes.</p>"},{"location":"Server/architecture/#miscellaneous","title":"Miscellaneous","text":""},{"location":"Server/architecture/#writetologs","title":"writeToLogs","text":"<p><code>void writeToLogs(const std::string_view &amp;status, const std::string &amp;msg)</code></p> <p>Allows to write into the server log a custom message. The Logs.hpp file provided the following definitions for the <code>status</code>: - logInfo - logWarn - logErr - logGameInfo - logGameWarn - logGameErr</p>"},{"location":"Server/architecture/#issocketopen","title":"isSocketOpen","text":"<p><code>bool isSocketOpen() const noexcept</code></p> <p>Returns true if the socket is open, false otherwise.</p>"},{"location":"Server/architecture/#setpacket_1","title":"setPacket","text":"<p><code>void setPacket(T &amp;packet, packet::packetHeader &amp;header, T &amp;data)</code></p> <p>Memory moves the header and data into the packet, overwriting the potential existing data in the packet T.</p>"},{"location":"Server/architecture/#fillbufferfromrequest","title":"fillBufferFromRequest","text":"<p><code>void fillBufferFromRequest(T &amp;packet, std::size_t size)</code></p> <p>Fills the <code>packet</code> given as parameter from the private variable <code>_packet</code> of the <code>Server</code> class. This function will memory copy into <code>packet</code>.</p>"},{"location":"Server/architecture/#sendresponse","title":"sendResponse","text":"<p><code>void sendResponse(const packet::packetTypes &amp;type, T &amp;data, std::uint64_t roomId = std::numeric_limits&lt;std::uint64_t&gt;::max(), bool toServerEndpoint = false, const std::string cliUuid = \"\")</code></p> <p>Builds a packet and sends it to all the clients in the given romm identifier if no <code>cliUuid</code> are provided. The <code>packet</code> must not contains any header as it is generated using the <code>type</code> variable and the size of packet. If the <code>cliUuid</code> is set, the packet will only be sent to the given client UUID. If the UUID is invalid or doesn't link to a valid client, the packet remains unsent.</p>"},{"location":"Server/architecture/#sendsparsearray","title":"sendSparseArray","text":"<p><code>void sendSparseArray(const packet::packetTypes &amp;type, sparse_array&lt;T&gt; &amp;sparseArray, std::uint64_t roomId, const std::string cliUuid = \"\")</code></p> <p>Sends the given ECS sparse array type T to the clients in the room identifier or to a specific client is cliUuid is set.</p>"},{"location":"Server/architecture/#receivecallback","title":"receiveCallback","text":"<p><code>void receiveCallback(const asio::error_code &amp;errCode, std::size_t bytesReceived)</code></p> <p>Handles the received packet type. This function is called from the asynchronous receiver function from Asio <code>socket.async_receive_from</code>.</p>"},{"location":"Server/architecture/#receive","title":"receive","text":"<p><code>void receive()</code></p> <p>Start the asynchronous receive operations.</p>"},{"location":"Server/architecture/#startserver","title":"startServer","text":"<p><code>void startServer()</code></p> <p>Start the server and calls everything required.</p>"},{"location":"Server/architecture/#stopserver","title":"stopServer","text":"<p><code>void stopServer()</code></p> <p>Stop the server properly.</p>"},{"location":"Server/architecture/#signalhandler","title":"signalHandler","text":"<p><code>static void signalHandler(int signum)</code></p> <p>Handles the signal events.</p>"},{"location":"Server/architecture/#addclient","title":"addClient","text":"<p><code>std::string addClient(std::uint64_t roomId)</code></p> <p>Adds a new client to the client list in the given room identifier and returns its new UUID.</p>"},{"location":"Server/architecture/#removeclient","title":"removeClient","text":"<p><code>void removeClient(const std::string &amp;uuid)</code></p> <p>Remove a client from the list given the uuid. If the client is not found, the client list remains unmodified.</p>"},{"location":"Server/ECS/Component/","title":"Component","text":"<p>The Component class is a template, that can be modified to match any requirements.</p> <p>For example, a Destroyable component could look like this:</p> <pre><code>class Destroyable {\npublic:\nDestroyable();\n~Destroyable();\nprivate:\nbool _destroyable;\n}\n</code></pre> <p>And a Position component can look like this: <pre><code>class Position {\npublic:\nPosition();\n~Position();\nprivate:\nfloat _x;\nfloat _y;\n}\n</code></pre></p> <p>It is important to understand that the Component class is only used to store values, and should not have any functions.</p>"},{"location":"Server/ECS/Entity/","title":"Entity","text":"<p>The concept of Entity in an ECS is very different from a classical Entity class that can be found in other Game Engines, but it is very simple to understand.</p> <p>An Entity is just a number, that correspond to a position in the differents arrays of Components stored in the Registry.</p> <p>Here is a schema explaining how we retrieve values from the Entity index:</p> <p></p> <p>The class Entity looks like this:</p> <pre><code>class Entity {\npublic:\nexplicit Entity(size_t size) {};\noperator size_t() const {\nreturn _size;\n};\nprotected:\nprivate:\nsize_t _size;\n};\n</code></pre>"},{"location":"Server/ECS/Entity/#constructor","title":"Constructor","text":""},{"location":"Server/ECS/Entity/#entity_1","title":"Entity()","text":"<p><pre><code>explicit Entity(size_t size) {}\n</code></pre> This constructors allows the Entity class to be constructed from a size_t value like this: Entity e = 13;</p>"},{"location":"Server/ECS/Entity/#operator","title":"Operator","text":""},{"location":"Server/ECS/Entity/#size_t","title":"size_t()","text":"<p><pre><code>operator size_t() const\n</code></pre> Returns the <code>size_t</code> value of the Entity</p>"},{"location":"Server/ECS/Entity/#value","title":"Value","text":""},{"location":"Server/ECS/Entity/#size_t-_size","title":"size_t _size","text":"<p><pre><code>size_t _size\n</code></pre> The \"index\" of the Entity in the Registry</p>"},{"location":"Server/ECS/Registry/","title":"Registry","text":"<p>A Registry is the core class of the ECS, which stores the differents SparseArrays in an <code>unordered_map</code>, using the type of the Component stored in the SparseArray as the index in the associative array.</p> <p>When a SparseArray is created, it creates multiple functions:     - a function that allows us to delete the Component of a given Entity (stored in _erase_functions).     - a function that allows us to add a new Entity to the array (stored in _add_functions).</p> <p>There is also the Entity management part in the Registry, to create, delete and update the differents Components of the Entity.</p> <p>The Registry class looks like this:</p> <pre><code>class Registry\n{\npublic:\nRegistry(){};\ntemplate &lt;class Component&gt;\nsparse_array&lt;Component&gt; &amp;register_component();\ntemplate &lt;class Component&gt;\nsparse_array&lt;Component&gt; &amp;get_components();\ntemplate &lt;class Component&gt;\nsparse_array&lt;Component&gt; const &amp;get_components() const;\n// #########################################################\n// #                 ENTITY MANAGEMENT                     #\n// #########################################################\nEntity spawn_entity();\nvoid kill_entity(Entity const &amp;e)\ntemplate &lt;typename Component&gt;\ntypename sparse_array&lt;Component&gt;::reference_type add_component(Entity const &amp;to, Component &amp;&amp;c);\ntemplate &lt;typename Component, typename... Params&gt;\ntypename sparse_array&lt;Component&gt;::reference_type emplace_component(Entity const &amp;to, Params &amp;&amp;...p);\ntemplate &lt;typename Component&gt;\nvoid remove_component(Entity const &amp;from);\nprivate:\nstd::unordered_map&lt;std::type_index, std::any&gt; _components_arrays;\nstd::unordered_map&lt;std::type_index, std::function&lt;void(Registry &amp;, Entity const &amp;)&gt;&gt; _erase_functions;\nstd::unordered_map&lt;std::type_index, std::function&lt;void(Registry &amp;)&gt;&gt; _add_functions;\nstd::list&lt;int&gt; _empty_entities;\n};\n</code></pre>"},{"location":"Server/ECS/Registry/#constructor","title":"Constructor","text":""},{"location":"Server/ECS/Registry/#registry_1","title":"Registry()","text":"<p><pre><code>Registry()\n</code></pre> Default constructor of Registry</p>"},{"location":"Server/ECS/Registry/#functions","title":"Functions","text":""},{"location":"Server/ECS/Registry/#register_components","title":"register_components()","text":"<p><pre><code>template &lt;class Component&gt;\nsparse_array&lt;Component&gt; &amp;register_component();\n</code></pre> Creates and adds a SparseArray using the given Component in the Registry, and returns it.</p>"},{"location":"Server/ECS/Registry/#usage","title":"Usage","text":"<p><pre><code>SparseArray velocity = Registry.register_component&lt;Velocity&gt;();\n</code></pre> Here the Velocity parameter is a Component.</p>"},{"location":"Server/ECS/Registry/#get_components","title":"get_components()","text":"<p><pre><code>template &lt;class Component&gt;\nsparse_array&lt;Component&gt; &amp;get_components();\n</code></pre> Returns the SparseArray of the given Component.</p>"},{"location":"Server/ECS/Registry/#get_components_1","title":"get_components()","text":"<p><pre><code>template &lt;class Component&gt;\nsparse_array&lt;Component&gt; const &amp;get_components() const;\n</code></pre> Same but returns a const SparseArray of the given Component.</p>"},{"location":"Server/ECS/Registry/#entity-management","title":"Entity management","text":""},{"location":"Server/ECS/Registry/#functions_1","title":"Functions","text":""},{"location":"Server/ECS/Registry/#spawn_entity","title":"spawn_entity()","text":"<p><pre><code>Entity spawn_entity();\n</code></pre> Creates a new Entity, by using the index of a previously deleted Entity (using <code>_empty_entities</code>), or by calling <code>_add_functions</code> on every SparseArray existing, and returns an Entity containing the index.</p>"},{"location":"Server/ECS/Registry/#kill_entity","title":"kill_entity()","text":"<p><pre><code>void kill_entity(Entity const &amp;e);\n</code></pre> Deletes the Entity, by calling <code>_delete_functions</code> on every SparseArray, and adds the index of the newly deleted Entity in <code>_empty_entities</code>.</p>"},{"location":"Server/ECS/Registry/#add_component","title":"add_component()","text":"<p><pre><code>template &lt;typename Component&gt;\ntypename sparse_array&lt;Component&gt;::reference_type add_component(Entity const &amp;to, Component &amp;&amp;c);\n</code></pre> Adds a value at the given index (Entity) to the SparseArray corresponding to the given Component.</p>"},{"location":"Server/ECS/Registry/#emplace_component","title":"emplace_component()","text":"<p><pre><code>template &lt;typename Component, typename... Params&gt;\ntypename sparse_array&lt;Component&gt;::reference_type emplace_component(Entity const &amp;to, Params &amp;&amp;...p);\n</code></pre> Same, but moves the value instead of copying it.</p>"},{"location":"Server/ECS/Registry/#remove_component","title":"remove_component()","text":"<p><pre><code>template &lt;typename Component&gt;\nvoid remove_component(Entity const &amp;from);\n</code></pre> Removes the value at the given index (Entity) from the SparseArray corresponding to the given Component;</p>"},{"location":"Server/ECS/Registry/#values","title":"Values","text":""},{"location":"Server/ECS/Registry/#_components_arrays","title":"_components_arrays","text":"<p><pre><code>std::unordered_map&lt;std::type_index, std::any&gt; _components_arrays;\n</code></pre> Stores the different SparseArrays.</p>"},{"location":"Server/ECS/Registry/#_erase_functions","title":"_erase_functions","text":"<p><pre><code>std::unordered_map&lt;std::type_index, std::function&lt;void(Registry &amp;, Entity const &amp;)&gt;&gt; _erase_functions;\n</code></pre> Stores the erase functions created when creating a new SparseArray, using the type of Component as the index.</p>"},{"location":"Server/ECS/Registry/#_add_functions","title":"_add_functions","text":"<p><pre><code>std::unordered_map&lt;std::type_index, std::function&lt;void(Registry &amp;)&gt;&gt; _add_functions;\n</code></pre> Stores the add functions created when creating a new SparseArray, using the type of Component as the index.</p>"},{"location":"Server/ECS/Registry/#_empty_entities","title":"_empty_entities","text":"<p><pre><code>std::list&lt;int&gt; _empty_entities;\n</code></pre> Stores the list of empty indexes, used to manage memory cache more efficiently</p>"},{"location":"Server/ECS/SparseArray/","title":"SparseArray","text":"<p>The SparseArray is a vector of optional Components.</p> <p>For example, a SparseArray named 'Velocity' will be able to store the velocity of each Entity. If an Entity, for example a wall, doens't need a Velocity component, than the value for this Entity in the Velocity SparceArray will be empty, hence the \"optional Component\".</p> <p>The class SparseArray looks like this:</p> <pre><code>class sparse_array\n{\npublic:\nusing value_type = std::optional&lt;Component&gt;;\nusing reference_type = value_type &amp;;\nusing const_reference_type = value_type const &amp;;\nusing container_t = std::vector&lt;value_type&gt;;\nusing size_type = typename container_t::size_type;\nusing iterator = typename container_t::iterator;\nusing const_iterator = typename container_t ::const_iterator;\nsparse_array() {};\nsparse_array(const sparse_array &amp;other);\nsparse_array(sparse_array &amp;&amp;other) noexcept;\n~sparse_array();\nsparse_array &amp;operator=(const sparse_array &amp;other);\nsparse_array &amp;operator=(sparse_array &amp;&amp;other) noexcept;\nreference_type operator[](size_t idx);\nconst_reference_type operator[](size_t idx) const;\niterator begin();\nconst_iterator begin() const;\nconst_iterator cbegin() const;\niterator end();\nconst_iterator end() const;\nconst_iterator cend() const;\nsize_type size() const;\nreference_type insert_at(size_type pos, Component const &amp;value);\nreference_type insert_at(size_type pos, Component &amp;&amp;value);\ntemplate &lt;class... Params&gt;\nreference_type emplace_at(size_type pos, Params &amp;&amp;...data);\nreference_type push_back(std::optional&lt;Component&gt; &amp;&amp;value);\nvoid erase(size_type pos);\nsize_type get_index(value_type const &amp;value) const;\nprivate:\ncontainer_t _data;\n};\n</code></pre>"},{"location":"Server/ECS/SparseArray/#constructorsdestructor","title":"Constructors/Destructor","text":""},{"location":"Server/ECS/SparseArray/#sparse_array","title":"sparse_array()","text":"<p><pre><code>sparse_array() {};\n</code></pre> The default constructor of the SparseArray class.</p>"},{"location":"Server/ECS/SparseArray/#sparse_arrayconst-sparse_array","title":"sparse_array(const sparse_array)","text":"<p><pre><code>sparse_array(const sparse_array &amp;other);\n</code></pre> The copy constructor of the SparseArray class.</p>"},{"location":"Server/ECS/SparseArray/#sparse_arrraysparse_array","title":"sparse_arrray(sparse_array &amp;&amp;)","text":"<p><pre><code>sparse_array(sparse_array &amp;&amp;other) noexcept;\n</code></pre> The move constructor of the SparseArray class.</p>"},{"location":"Server/ECS/SparseArray/#sparse_array_1","title":"~sparse_array()","text":"<p><pre><code>~sparse_array();\n</code></pre> The default destructor of the SparseArray class.</p>"},{"location":"Server/ECS/SparseArray/#operators","title":"Operators","text":""},{"location":"Server/ECS/SparseArray/#operator","title":"&amp;operator=","text":"<p><pre><code>sparse_array &amp;operator=(const sparse_array &amp;other);\n</code></pre> The copy assignment operator of the SparseArray class.</p>"},{"location":"Server/ECS/SparseArray/#operator_1","title":"&amp;operator=","text":"<p><pre><code>sparse_array &amp;operator=(sparse_array &amp;&amp;other) noexcept;\n</code></pre> The move assignment operator of the SparseArray class.</p>"},{"location":"Server/ECS/SparseArray/#operator_2","title":"&amp;operator[]","text":"<p><pre><code>reference_type operator[](size_t idx);\n</code></pre> Takes the index of a Entity and returns a reference to the value contained in the array for this entity.</p>"},{"location":"Server/ECS/SparseArray/#operator_3","title":"&amp;operator[]","text":"<p><pre><code>const_reference_type operator[](size_t idx) const;\n</code></pre> Same but returns a const reference instead of a reference.</p>"},{"location":"Server/ECS/SparseArray/#functions","title":"Functions","text":""},{"location":"Server/ECS/SparseArray/#insert_at","title":"insert_at()","text":"<p><pre><code>reference_type insert_at(size_type pos, Component const &amp;value);\n</code></pre> Inserts the value at the specified position, and returns the reference to the value.</p>"},{"location":"Server/ECS/SparseArray/#insert_at_1","title":"insert_at()","text":"<p><pre><code>reference_type insert_at(size_type pos, Component &amp;&amp;value);\n</code></pre> Same but moves the value instead of copying it.</p>"},{"location":"Server/ECS/SparseArray/#emplace_at","title":"emplace_at()","text":"<p><pre><code>template &lt;class... Params&gt;\nreference_type emplace_at(size_type pos, Params &amp;&amp;...data);\n</code></pre> Same as <code>insert_at</code> but moves the value instead of copying it.</p>"},{"location":"Server/ECS/SparseArray/#push_back","title":"push_back()","text":"<p><pre><code>reference_type push_back(std::optional&lt;Component&gt; &amp;&amp;value);\n</code></pre> Insert the value at the back of the array.</p>"},{"location":"Server/ECS/SparseArray/#erase","title":"erase()","text":"<p><pre><code>void erase(size_type pos);\n</code></pre> Erases the value at the specified position.</p>"},{"location":"Server/ECS/SparseArray/#get_index","title":"get_index()","text":"<p><pre><code>size_type get_index(value_type const &amp;value) const;\n</code></pre> Take a reference to an optional Component, and return its index. Allows us to retreive the index of an Entity its value.</p>"},{"location":"Server/ECS/SparseArray/#value","title":"Value","text":""},{"location":"Server/ECS/SparseArray/#_data","title":"_data","text":"<p><pre><code>container_t _data\n</code></pre> Vector of optional Components</p>"},{"location":"Server/ECS/Systems/Network/","title":"NetworkSystem","text":"<p>The network system provided a way to communicate with the server and modify the ECS content upon receiving a packet.</p> <p>It is accessible inside the NetworkSystem.hpp file</p> <p>Here are the function definitions</p>"},{"location":"Server/ECS/Systems/Network/#constructors-destructors","title":"Constructors / Destructors","text":""},{"location":"Server/ECS/Systems/Network/#networksystem_1","title":"NetworkSystem","text":"<p><code>NetworkSystem()</code></p> <p>Ctor of the system.</p>"},{"location":"Server/ECS/Systems/Network/#networksystem_2","title":"~NetworkSystem","text":"<p><code>~NetworkSystem()</code></p> <p>Dtor of the system.</p>"},{"location":"Server/ECS/Systems/Network/#newplayer","title":"newPlayer","text":"<p><code>std::pair&lt;float, float&gt; newPlayer(std::uint64_t roomId, Registry &amp;ecs, const std::string &amp;clientUUID)</code></p> <p>Adds the new player UUID into the registry of the room identifier.</p>"},{"location":"Server/ECS/Systems/Network/#removeplayer","title":"removePlayer","text":"<p><code>void removePlayer(Registry &amp;ecs, const std::string &amp;clientUUID)</code></p> <p>Remove the player UUID from the registry provided.</p>"},{"location":"Server/ECS/Systems/Network/#affectcontrollable","title":"affectControllable","text":"<p><code>void affectControllable(Registry &amp;ecs, const std::string &amp;clientUUID, int keyCode)</code></p> <p>Handles the received input from the client UUID inside the given ecs.</p>"},{"location":"Server/ECS/Systems/Network/#addclienttoroom","title":"addClientToRoom","text":"<p><code>bool addClientToRoom(const std::string &amp;clientUUID, std::uint64_t roomId)</code></p> <p>Adds the new client UUID to the given room identifier.</p>"},{"location":"Server/ECS/Systems/Network/#removeclientfromroom","title":"removeClientFromRoom","text":"<p><code>bool removeClientFromRoom(const std::string &amp;clientUUID, std::uint64_t roomId)</code></p> <p>Removes the given client UUID from the roomId.</p>"},{"location":"Server/ECS/Systems/Network/#roomexist","title":"roomExist","text":"<p><code>bool roomExist(std::uint64_t roomId)</code></p> <p>Check if the given room identifier exists. Returns true if so or false.</p>"},{"location":"Server/ECS/Systems/Network/#createnewroom","title":"createNewRoom","text":"<p><code>std::uint64_t createNewRoom(std::uint8_t maxSlots)</code></p> <p>Creates a new room with the given maximum number of player allowed.</p>"},{"location":"Server/ECS/Systems/Network/#deleteroom","title":"deleteRoom","text":"<p><code>void deleteRoom(std::uint64_t roomId)</code></p> <p>Deletes the given room from the list.</p>"},{"location":"Server/ECS/Systems/Network/#sendresponse","title":"sendResponse","text":"<p><code>void sendResponse(const packet::packetTypes &amp;type, T &amp;data, std::uint64_t roomId = std::numeric_limits&lt;std::uint64_t&gt;::max(), bool toServerEndpoint = false, const std::string cliUuid = \"\")</code></p> <p>Asks the network to send a response to the clients of the given room identifier.</p>"},{"location":"Server/ECS/Systems/Network/#sendsparsearray","title":"sendSparseArray","text":"<p><code>void sendSparseArray(const packet::packetTypes &amp;type, sparse_array&lt;T&gt; &amp;sparseArray, std::uint64_t roomId, const std::string &amp;cliUuid = \"\")</code></p> <p>Asks the network to send the sparse array to the clients of the given room identifiers.</p>"},{"location":"Server/ECS/Systems/Network/#isserveravailable","title":"isServerAvailable","text":"<p><code>bool isServerAvailable()</code></p> <p>Asks the network if the socket is opened.</p>"},{"location":"Server/ECS/Systems/Network/#getconnectednb","title":"getConnectedNb","text":"<p><code>std::size_t getConnectedNb(std::uint64_t roomId)</code></p> <p>Returns the number of clients connected to the given room identifier.</p>"},{"location":"Server/ECS/Systems/Network/#getrooms","title":"getRooms","text":"<p><code>std::vector&lt;Room&gt; &amp;getRooms() noexcept</code></p> <p>Returns the vector of rooms already created.</p>"},{"location":"Server/ECS/Systems/Network/#initroom","title":"initRoom","text":"<p><code>void initRoom(std::uint64_t roomId, std::unordered_map&lt;std::uint64_t, Registry&gt; &amp;regs)</code></p> <p>Initialize the ECS for the newly created room. This is mandatory before doing anything with the registry.</p>"},{"location":"Server/ECS/Systems/Network/#handlers","title":"Handlers","text":""},{"location":"Server/ECS/Systems/Network/#handletextmessage","title":"handleTextMessage","text":"<p><code>void handleTextMessage(const std::array&lt;std::uint8_t, packetSize&gt; &amp;packet, const packet::packetHeader &amp;header)</code></p> <p>Reads the received packet message and sends it back to all clients in the room.</p>"},{"location":"Server/ECS/Systems/Network/#handleconnectionrequest","title":"handleConnectionRequest","text":"<p><code>void handleConnectionRequest(std::unordered_map&lt;std::uint64_t, Registry&gt; &amp;regs, packet::packetTypes type, std::array&lt;std::uint8_t, packetSize&gt; &amp;packet)</code></p> <p>Reads the received packet connection request and performs the required actions to satisfy the client needs. The connection can be rejected if the information asked are corrupted or invalid.</p>"},{"location":"Server/ECS/Systems/Network/#handledisconnectionrequest","title":"handleDisconnectionRequest","text":"<p><code>void handleDisconnectionRequest(std::unordered_map&lt;std::uint64_t, Registry&gt; &amp;regs, const std::array&lt;std::uint8_t, packetSize&gt; &amp;packet, const packet::packetHeader &amp;header)</code></p> <p>Reads the received packet disconnection request and performs the required actions to disconnect the client.</p>"},{"location":"Server/ECS/Systems/Network/#handleentitykilled","title":"handleEntityKilled","text":"<p><code>void handleEntityKilled(Entity entity, std::uint64_t roomId)</code></p> <p>Sends a packet to all clients in the given room identifier that the given entity has been killed.</p>"},{"location":"Server/ECS/Systems/Network/#handlekeyboardevent","title":"handleKeyboardEvent","text":"<p><code>void handlekeyboardEvent(std::unordered_map&lt;std::uint64_t, Registry&gt; &amp;regs, const std::array&lt;std::uint8_t, packetSize&gt; &amp;packet, const packet::packetHeader &amp;header)</code></p> <p>Calls the affectControllable function to handle the keyboard events.</p>"},{"location":"Server/ECS/Systems/Network/#handlecreateroom","title":"handleCreateRoom","text":"<p><code>void handleCreateRoom(std::unordered_map&lt;std::uint64_t, Registry&gt; &amp;regs, const std::array&lt;std::uint8_t, packetSize&gt; &amp;packet)</code></p> <p>Reads the received packet to create a new room.</p>"},{"location":"Server/ECS/Systems/Network/#handlekeepconnection","title":"handleKeepConnection","text":"<p><code>void handleKeepConnection(const std::array&lt;std::uint8_t, packetSize&gt; &amp;packet, const packet::packetHeader &amp;header)</code></p> <p>Accept the client response to the connection ping.</p>"},{"location":"Server/ECS/Systems/Network/#miscellaneous","title":"Miscellaneous","text":""},{"location":"Server/ECS/Systems/Network/#networksystemserver","title":"networkSystemServer","text":"<p><code>void networkSystemServer(std::unordered_map&lt;std::uint64_t, Registry&gt; &amp;regs)</code></p> <p>The core function of the networkSystemServer</p>"},{"location":"Server/ECS/Systems/Network/#getclients","title":"getClients","text":"<p><code>std::vector&lt;net::Client&gt; &amp;getClients() noexcept</code></p> <p>Asks the network to return the client list as a vector of Client class.</p>"},{"location":"Server/ECS/Systems/Network/#removeclient","title":"removeClient","text":"<p><code>void removeClient(const std::string &amp;clientUUID)</code></p> <p>Asks the network to removes the given client UUID from the list.</p>"},{"location":"Server/ECS/Systems/Network/#writetologs","title":"writeToLogs","text":"<p><code>void writeToLogs(const std::string_view &amp;status, const std::string &amp;msg)</code></p> <p>Asks the network to write to the server log the provided message.</p>"},{"location":"Server/ECS/Systems/Network/#removetimeoutclients","title":"removeTimeoutClients","text":"<p><code>bool removeTimeoutClients(std::uint64_t roomId, Registry &amp;ecs)</code></p> <p>Removes the no longer connected or too slow clients from the given room identifier.</p>"},{"location":"Server/Protocol/binary_protocol/","title":"Binary protocol","text":"<p>Communication between the server and the players/clients is done using binary packets.</p> <p>A packet on its own contains a header and its data to transmit. The header contains the type of packet sent and the size of the following data. By default (if unchanged in the code) the packet size locally is limited to 1024 bytes.</p> <p>Here is the packet header structure defined in the Packet.hpp <pre><code>struct packetHeader\n{\npacketTypes type;\nstd::uint16_t dataSize;\npacketHeader() : type(PLACEHOLDER), dataSize(0) {}\npacketHeader(packetTypes type, std::uint16_t dataSize) : type(type), dataSize(dataSize) {}\n};\n</code></pre></p> <p>This can be interpreted as the following pseudo-code <pre><code>HEADER\n{\n    INTEGER type\n    16BIT UNSIGNED INTEGER size_of_the_data\n}\n</code></pre></p> <p>The <code>packetTypes type</code> refers to the following <code>Enum</code> <pre><code>enum packetTypes : std::uint8_t\n{\nPLACEHOLDER,\nCONNECTION_REQUEST,\nDISCONNECTION_REQUEST,\nCLIENT_STATUS,\n};\n</code></pre> The <code>std::uint16_t dataSize</code> stores an unsigned 16bits integer refering to the packet data size to be read from the recipient. Data must be strictly identical to the data size, if the value if lower than its actual size, it will be truncated, leading to undefined behavior. If the value is greather than its actual size, it will mostly crash or leads to buffer overflow, leading to undefined behavior. If the type is set to <code>PLACEHOLDER</code>, no data is expected to be read, setting the <code>dataSize</code> to 0.</p> <p>Packet header contains contructors to initialize the header with given values.</p> <p>Packet lists:</p> <ul> <li>Placeholder</li> <li>Connection request</li> <li>Disconnection request</li> <li>Client status</li> </ul>"},{"location":"Server/Protocol/Packets/client_status/","title":"Client status","text":"<p>Type <code>CLIENT_STATUS</code> <pre><code>struct clientStatus\n{\nstd::uint8_t status;\nstd::array&lt;std::uint8_t, uuidSize&gt; uuid;\nclientStatus() : status(LOSE_CLIENT) {}\nclientStatus(const std::string &amp;cliUuid) : status(LOSE_CLIENT)\n{\nstd::memmove(&amp;uuid, cliUuid.data(), uuidSize);\n}\nclientStatus(const std::string &amp;cliUuid, std::uint8_t status) : status(status)\n{\nstd::memmove(&amp;uuid, cliUuid.data(), uuidSize);\n}\n};\n</code></pre> The client status packet tells the connected client another one connected or disconnected from the server. If a client disconnects, the status is set to LOSE_CLIENT telling all connected clients that the UUID client disconnected. If a client connected to server, the status is set to NEW_CLIENT.</p> <p>The client must listen at any time for this type of packet to handle their game properly.</p>"},{"location":"Server/Protocol/Packets/connection_request/","title":"Connection request","text":"<p>Type <code>CONNECTION_REQUEST</code> <pre><code>struct connectionRequest\n{\nstd::uint8_t status;\nstd::array&lt;std::uint8_t, UUID_SIZE&gt; uuid;\nconnectionRequest() : status(REQUEST)\n{\nstd::memset(&amp;uuid, 0, UUID_SIZE);\n}\nconnectionRequest(uint8_t status, const std::string &amp;cliUuid) : status(status)\n{\nstd::memmove(&amp;uuid, cliUuid.data(), UUID_SIZE);\n}\n};\n</code></pre> The connection request packet asks the server if the client can connect to the server. The client is not expected to provide anything upon sending the packet, however, the packet type must be revelant in the header.</p> <p>The <code>std::uint8_t status</code> refers to the server response and so, doesn't need to be set from the client. The server will response with <code>ACCEPTED</code> anyway, as the connection will always be valid, even if the client is already connected to the server. It is the client job to check if he already has an open connection with the server.</p> <p>When receiving the packet response from the server, the <code>dataSize</code> should be set to <code>UUID_SIZE</code>, or 37 bits (is unchanged in the code) containing the UUID the client holds on the server. This Universally Unique Identifier must be used from now to send any packets to the server, if no UUID are provided, the server will refuse them.</p> <p>The UUID represent a string as follow: <code>XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX</code></p>"},{"location":"Server/Protocol/Packets/disconnection_request/","title":"Disconnection request","text":"<p>Type <code>DISCONNECTION_REQUEST</code> <pre><code>struct disconnectionRequest\n{\nstd::uint8_t status;\nstd::array&lt;packetTypes, UUID_SIZE&gt; uuid;\ndisconnectionRequest(const std::string &amp;cliUuid) : status(REQUEST)\n{\nstd::memmove(&amp;uuid, cliUuid.data(), UUID_SIZE);\n}\ndisconnectionRequest(uint8_t status) : status(status) {}\n};\n</code></pre> The disconnection packet tells the server the client disconnected from it. No response should be expected from the server and the client must not send anything from now as the server will reject everything unless the client resends a connection request packet.</p> <p>The client must send its UUID with the packet and the header type must be <code>DISCONNECTION_REQUEST</code></p>"},{"location":"Server/Protocol/Packets/placeholder/","title":"Placeholder","text":"<p>Type <code>PLACEHOLDER</code></p> <p>The placeholder packet doesn't do anything on its own, its usage can be useful to tests connection between clients and server. Only the type of packet is set in the header so <code>dataSize</code> is 0 and no data is set after.</p>"}]}